01: package kr.co.infopub.chapter.s055;
02: import java.lang.reflect.Constructor;
03: import java.lang.reflect.Method;
04: public class UsingReflection {
05:  public static String toModi(int n){
06: 	String s="";
07: 	switch(n){
08: 	    case 0 : s=" ";break;
09: 	    case 1 : s="public ";break;
10: 	    case 2 : s="private ";break;
11: 	    case 4 : s="protected ";break;
12: 	    case 8 : s="static ";break;
13: 	    case 10 : s="private static ";break;
14: 	    case 9 : 
15: 	    case 137 : s="public static ";break;
16: 	    case 17 : s="public final ";break;
17: 	    case 257 : s="public  native ";break;
18: 	    case 260 : s="protected native ";break;
19: 	    case 273 : s="public final native ";break;
20: 	    default : s="xxxx"; break;
21: 	}
22: 	return s;
23:  }
24:  public static String toRe(String msg){
25: 	String s="";
26: 	if(msg.indexOf("[")!=-1){
27: 		if(msg.contains("[C")){ 
28: 			s=msg.substring(msg.indexOf(" ")+1).trim();
29: 			s=s.replace("[C", "char[] ");
30: 		}else if(msg.contains("[L")){ 
31: 			s=msg.substring(msg.indexOf(" ")+1).trim();
32: 			s=s.replace("[L", "").replace(";", "");
33: 			s=s.concat("[]");
34: 		}else if(msg.contains("[B")){ 
35: 			s=msg.substring(msg.indexOf(" ")+1).trim();
36: 			s=s.replace("[B", "byte[] ");
37: 		}
38: 	}else if(msg.indexOf(" ")!=-1){
39: 		s=msg.substring(msg.indexOf(" ")+1).trim();
40: 	}else{
41: 		s=msg.trim();
42: 	}
43: 	return s;
44:  }
45:  public static void main(String[] args) {
46: 	Object obj1=new Object();
47: 	try {
48: 		//Class classes=obj1.getClass();
49: 		Class classes=Class.forName("java.lang.String"); // ClassNotFoundException 
50: 		System.out.println("--------------Method 찾기----------------");
51: 		Method[] mes =classes.getDeclaredMethods();
52: 		for(Method me:mes){
53: 			if(me.getModifiers()>4000){continue; }    //  4000초과면  다음 스텝
54: 			System.out.printf("%s\t\t",toModi(me.getModifiers()));  // 제한자 종류
55: 			System.out.printf("%-30s\t\t",toRe(me.getReturnType().toString())); // 리턴 종류
56: 			System.out.printf("%s",me.getName()); // 클래스 이름
57: 			System.out.printf("(",""); // 2개 이상일 때 ,로 표시
58: 			Class [] aa=me.getParameterTypes(); // 아규먼트(인자, 파라메터)
59: 			for(int j=0; j<aa.length ; j++){
60: 				System.out.printf("%s",toRe(aa[j].getName()));  // 아규먼트의 이름
61: 				if(j!=aa.length-1){   // 2개 이상이면
62: 					System.out.print(",");
63: 				}
64: 			}
65: 			System.out.printf(")", "");
66: 			System.out.println();
67: 		}
68: 		System.out.println("--------------생성자 찾기----------------");
69: 		Constructor [] constructor = classes.getDeclaredConstructors();
70: 		for(Constructor con: constructor){
71: 			System.out.print(con.getName());
72: 			System.out.printf("(","");
73: 			Class [] aa=con.getParameterTypes();
74: 			for(int j=0; j<aa.length ; j++){
75: 				System.out.printf("%s",toRe(aa[j].getName()));
76: 				if(j!=aa.length-1){
77: 					System.out.print(",");
78: 				}
79: 			}
80: 			System.out.printf(")","");
81: 			System.out.println();
82: 		}
83: 	}catch (ClassNotFoundException e) {
84: 		System.out.println(e);
85: 	} 
86:  }
87: }
